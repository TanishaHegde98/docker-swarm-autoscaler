version: "3.4"

volumes:
  prometheus_data: {}
  grafana_data: {}

services:
  ########## service to generte cpu load and receive http_request ##########
  web:
    image: mnijagal/generate_load:latest
    ports:
      - "8080:8080"

  ########## service to generate memory usage load ##########
  # web:
  #   image: progrium/stress:latest
  #   ports:
  #     - "8080:8080"
  #   command: [--cpu, "10", --io, "1", --vm, "2", --vm-bytes, "50G", --timeout, "60s"]


  prometheus:
    image: quay.io/prometheus/prometheus:v2.0.0
    ports:
      - "9090:9090"
    command: "--config.file=/etc/prometheus/prometheus.yml"
    configs:
      - source: prometheus.yml
        target: /etc/prometheus/prometheus.yml
    volumes:
      - ./:/etc/prometheus/
      - prometheus_data:/prometheus
    links:
      - cadvisor:cadvisor
    depends_on:
      - cadvisor
  
  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - 9100:9100
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana
    user: '472'
    restart: always
    environment:
      GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    ports:
      - 3000:3000
    depends_on:
      - prometheus

  cadvisor:
    image: google/cadvisor:v0.33.0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global
    command: 
      - --enable_load_reader=true


  autoscaler:
    image: docker-swarm-autoscaler:latest
    command: "/etc/docker-swarm-autoscaler/autoscaler.yml --log-level=DEBUG"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    configs:
      - source: autoscaler.yml
        target: /etc/docker-swarm-autoscaler/autoscaler.yml
    deploy:
      placement:
        constraints:
          - node.role == manager
  

configs:
  prometheus.yml:
    file: ./prometheus.yml
  autoscaler.yml:
    file: ./autoscaler.yml